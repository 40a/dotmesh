---
apiVersion: v1
kind: List
items:
  - apiVersion: "etcd.database.coreos.com/v1beta2"
    kind: "EtcdCluster"
    metadata:
      name: "datamesh-etcd-cluster"
      namespace: "datamesh"
    spec:
      size: 3
      version: "3.1.8"
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: datamesh
      #annotations:
      #  datamesh.io/key: value
      labels:
        name: datamesh
      namespace: datamesh
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: datamesh
      #annotations:
      #  datamesh.io/key: value
      labels:
        name: datamesh
    rules:
      - apiGroups:
          - ''
        resources:
          - pods
          - namespaces
          - nodes
        verbs:
          - get
          - list
          - watch
  # TODO: bind to system:persistent-volume-provisioner?
  # https://kubernetes.io/docs/admin/authorization/rbac/#other-component-roles
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: datamesh
      #annotations:
      #  datamesh.io/key: value
      labels:
        name: datamesh
    roleRef:
      kind: ClusterRole
      name: datamesh
      apiGroup: rbac.authorization.k8s.io
    subjects:
      - kind: ServiceAccount
        name: datamesh
        namespace: datamesh
  - apiVersion: v1
    kind: Service
    metadata:
      name: datamesh
      namespace: datamesh
    spec:
      type: ClusterIP
      ports:
      - port: 6969
        protocol: TCP
      selector:
        name: datamesh
  - apiVersion: extensions/v1beta1
    kind: DaemonSet
    metadata:
      name: datamesh
      #annotations:
      #  datamesh.io/key: value
      labels:
        name: datamesh
      namespace: datamesh
    spec:
      template:
        metadata:
          labels:
            name: datamesh
        spec:
          containers:
            - name: datamesh-outer
              command:
                - /require_zfs.sh
                - datamesh-server
              ports:
              - containerPort: 6969
                hostPort: 6969
              env:
                - name: HOSTNAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: spec.nodeName
                - name: DATAMESH_ETCD_ENDPOINT
                  # etcd deployed by etcd operator.
                  value: "http://datamesh-etcd-cluster-client.datamesh.svc.cluster.local:2379"
                - name: DATAMESH_DOCKER_IMAGE
                  value: "quay.io/datamesh/datamesh-server:latest"
                - name: PATH
                  value: "/bundled-lib/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                - name: LD_LIBRARY_PATH
                  value: "/bundled-lib/lib:/bundled-lib/usr/lib/"
                - name: ALLOW_PUBLIC_REGISTRATION
                  value: "1"
                # XXX some duplication here wrt datamesh/cmd/dm/pkg/commands/cluster.go
                - name: INITIAL_ADMIN_PASSWORD_FILE
                  value: /secret/datamesh-admin-password.txt
                - name: INITIAL_ADMIN_API_KEY_FILE
                  value: /secret/datamesh-api-key.txt
                - name: USE_POOL_NAME
                  value: pool
                - name: USE_POOL_DIR
                  value: /var/lib/docker/datamesh
                - name: LOG_ADDR
                  value: "" # LOG_ADDR
              image: 'quay.io/datamesh/datamesh-server:latest'
              imagePullPolicy: Always
              livenessProbe:
                httpGet:
                  path: /status
                  port: 6969
                initialDelaySeconds: 30
              resources:
                requests:
                  cpu: 10m
              securityContext:
                privileged: true
              volumeMounts:
              #  - name: foo
              #    mountPath: /bar
                - name: docker-sock
                  mountPath: /var/run/docker.sock
                - name: run-docker
                  mountPath: /run/docker
                - name: var-lib-docker
                  mountPath: /var/lib/docker
                - name: system-lib
                  mountPath: /system-lib/lib
                - name: datamesh-kernel-modules
                  mountPath: /bundled-lib
                - name: datamesh-secret
                  mountPath: /secret
                - name: test-pools-dir
                  mountPath: /datamesh-test-pools
          #hostNetwork: true
          #hostPID: true
          restartPolicy: Always
          securityContext:
            seLinuxOptions: {}
          serviceAccountName: datamesh
          tolerations:
            - effect: NoSchedule
              operator: Exists
          volumes:
            #- name: foo
            #  hostPath:
            #    path: /bar
            - name: test-pools-dir
              hostPath:
                path: /datamesh-test-pools
            - name: docker-sock
              hostPath:
                path: /var/run/docker.sock
            - name: run-docker
              hostPath:
                path: /run/docker
            - name: var-lib-docker
              hostPath:
                path: /var/lib/docker
            - name: system-lib
              hostPath:
                path: /lib
            - name: datamesh-kernel-modules
              emptyDir: {}
            - name: datamesh-secret
              secret:
                secretName: datamesh
      updateStrategy:
        type: RollingUpdate
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: datamesh-provisioner
      labels:
        name: datamesh-provisioner
      namespace: datamesh
  - apiVersion: rbac.authorization.k8s.io/v1alpha1
    kind: ClusterRole
    metadata:
      name: datamesh-provisioner-runner
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "create", "delete"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["list", "watch", "create", "update", "patch"]
  - apiVersion: rbac.authorization.k8s.io/v1alpha1
    kind: ClusterRoleBinding
    metadata:
      name: datamesh-provisioner
    subjects:
      - kind: ServiceAccount
        name: datamesh-provisioner
        namespace: datamesh
    roleRef:
      kind: ClusterRole
      name: datamesh-provisioner-runner
      apiGroup: rbac.authorization.k8s.io
  - apiVersion: apps/v1beta1 # for versions <1.8.0; use apps/v1beta2 for versions >=1.8.0
    kind: Deployment
    metadata:
      name: datamesh-dynamic-provisioner
      namespace: datamesh
      labels:
        app: datamesh-dynamic-provisioner
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: datamesh-dynamic-provisioner
      template:
        metadata:
          labels:
            app: datamesh-dynamic-provisioner
        spec:
          serviceAccount: datamesh-provisioner
          containers:
          - name: datamesh-dynamic-provisioner
            image: 'quay.io/datamesh/datamesh-dynamic-provisioner:latest'
            imagePullPolicy: "IfNotPresent"
            env:
            - name: DATAMESH_API_KEY
              valueFrom:
                secretKeyRef:
                  name: datamesh
                  key: datamesh-api-key.txt
  - apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: datamesh
    provisioner: datamesh/datamesh-dynamic-provisioner
    parameters:
      # Sensible defaults
      datameshNode: "datamesh"
      datameshUser: "admin"
      datameshNamespace: "admin"
